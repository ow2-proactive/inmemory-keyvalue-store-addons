group "org.ow2.proactive"
version projectVersion

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://repository.activeeon.com/content/groups/proactive/"
        }
    }

    dependencies {
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

apply from: "$rootDir/gradle/ext/coding-format.gradle"

allprojects {
    apply plugin: "java"
    apply plugin: "maven"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty("nexusUsername")}",
                            password: "${System.getProperty("nexusPassword")}")
                }
                repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                    authentication(userName: "${System.getProperty("nexusUsername")}",
                            password: "${System.getProperty("nexusPassword")}")
                }
            }
        }
    }
}

defaultTasks "clean", "jar"

repositories {
    if (project.hasProperty("local")) {
        mavenLocal()
    }

    jcenter()
    maven { url "http://repository.activeeon.com/content/groups/proactive/" }
}

dependencies {
    compile "org.awaitility:awaitility:2.0.0"
    compile "com.google.guava:guava:19.0"
    compileOnly "org.ow2.proactive:scheduler-api:$projectVersion"

    testCompile "com.google.truth:truth:0.29"
    testCompile "junit:junit:4.12"
    testCompile "org.ow2.proactive:scheduler-api:$projectVersion"
}

jar {
    from {
        configurations.compile
                .findAll { !it.name.toLowerCase().contains("slf4j") }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
}
